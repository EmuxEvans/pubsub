# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pubsub/broker.proto

require 'google/protobuf'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_message "pubsub.Empty" do
  end
  add_message "pubsub.Timestamp" do
    optional :seconds, :int64, 1
    optional :nanos, :int32, 2
  end
  add_message "pubsub.Payload" do
    optional :data, :bytes, 1
  end
  add_message "pubsub.ReceivedMessage" do
    optional :topic, :string, 1
    optional :message_id, :string, 2
    optional :payload, :message, 3, "pubsub.Payload"
    optional :publish_time, :message, 4, "pubsub.Timestamp"
  end
  add_message "pubsub.StoredMessage" do
    optional :message_id, :string, 1
    optional :payload, :message, 2, "pubsub.Payload"
    optional :publish_time, :message, 3, "pubsub.Timestamp"
  end
  add_message "pubsub.PublishMessages" do
    optional :topic, :string, 1
    repeated :messages, :message, 2, "pubsub.Payload"
  end
  add_message "pubsub.Subscription" do
    repeated :topics, :string, 1
    optional :maxMessages, :int32, 2
  end
end

module Pubsub
  Empty = Google::Protobuf::DescriptorPool.generated_pool.lookup("pubsub.Empty").msgclass
  Timestamp = Google::Protobuf::DescriptorPool.generated_pool.lookup("pubsub.Timestamp").msgclass
  Payload = Google::Protobuf::DescriptorPool.generated_pool.lookup("pubsub.Payload").msgclass
  ReceivedMessage = Google::Protobuf::DescriptorPool.generated_pool.lookup("pubsub.ReceivedMessage").msgclass
  StoredMessage = Google::Protobuf::DescriptorPool.generated_pool.lookup("pubsub.StoredMessage").msgclass
  PublishMessages = Google::Protobuf::DescriptorPool.generated_pool.lookup("pubsub.PublishMessages").msgclass
  Subscription = Google::Protobuf::DescriptorPool.generated_pool.lookup("pubsub.Subscription").msgclass
end

require 'grpc'

module Pubsub
  module Broker
    # Interface exported by the server.
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'pubsub.Broker'

      rpc :Publish, PublishMessages, Empty
      rpc :Subscribe, Subscription, stream(ReceivedMessage)
    end

    Stub = Service.rpc_stub_class
  end
end
