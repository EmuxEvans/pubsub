/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pubsub.Empty', null, global);
goog.exportSymbol('proto.pubsub.Payload', null, global);
goog.exportSymbol('proto.pubsub.PublishMessages', null, global);
goog.exportSymbol('proto.pubsub.ReceivedMessage', null, global);
goog.exportSymbol('proto.pubsub.StoredMessage', null, global);
goog.exportSymbol('proto.pubsub.Subscription', null, global);
goog.exportSymbol('proto.pubsub.Timestamp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubsub.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pubsub.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pubsub.Empty.displayName = 'proto.pubsub.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pubsub.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.pubsub.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pubsub.Empty} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pubsub.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubsub.Empty}
 */
proto.pubsub.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubsub.Empty;
  return proto.pubsub.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubsub.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubsub.Empty}
 */
proto.pubsub.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pubsub.Empty} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.Empty.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubsub.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.Empty.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pubsub.Empty} The clone.
 */
proto.pubsub.Empty.prototype.cloneMessage = function() {
  return /** @type {!proto.pubsub.Empty} */ (jspb.Message.cloneMessage(this));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubsub.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pubsub.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pubsub.Timestamp.displayName = 'proto.pubsub.Timestamp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pubsub.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.pubsub.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pubsub.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pubsub.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    seconds: msg.getSeconds(),
    nanos: msg.getNanos()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubsub.Timestamp}
 */
proto.pubsub.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubsub.Timestamp;
  return proto.pubsub.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubsub.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubsub.Timestamp}
 */
proto.pubsub.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNanos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pubsub.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.Timestamp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubsub.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.Timestamp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getNanos();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pubsub.Timestamp} The clone.
 */
proto.pubsub.Timestamp.prototype.cloneMessage = function() {
  return /** @type {!proto.pubsub.Timestamp} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 seconds = 1;
 * @return {number}
 */
proto.pubsub.Timestamp.prototype.getSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pubsub.Timestamp.prototype.setSeconds = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 nanos = 2;
 * @return {number}
 */
proto.pubsub.Timestamp.prototype.getNanos = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.pubsub.Timestamp.prototype.setNanos = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubsub.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pubsub.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pubsub.Payload.displayName = 'proto.pubsub.Payload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pubsub.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.pubsub.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pubsub.Payload} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pubsub.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubsub.Payload}
 */
proto.pubsub.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubsub.Payload;
  return proto.pubsub.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubsub.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubsub.Payload}
 */
proto.pubsub.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pubsub.Payload} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.Payload.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubsub.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.Payload.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pubsub.Payload} The clone.
 */
proto.pubsub.Payload.prototype.cloneMessage = function() {
  return /** @type {!proto.pubsub.Payload} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.pubsub.Payload.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.pubsub.Payload.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.pubsub.Payload.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value  */
proto.pubsub.Payload.prototype.setData = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubsub.ReceivedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pubsub.ReceivedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pubsub.ReceivedMessage.displayName = 'proto.pubsub.ReceivedMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pubsub.ReceivedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.pubsub.ReceivedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pubsub.ReceivedMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pubsub.ReceivedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: msg.getTopic(),
    messageId: msg.getMessageId(),
    payload: (f = msg.getPayload()) && proto.pubsub.Payload.toObject(includeInstance, f),
    publishTime: (f = msg.getPublishTime()) && proto.pubsub.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubsub.ReceivedMessage}
 */
proto.pubsub.ReceivedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubsub.ReceivedMessage;
  return proto.pubsub.ReceivedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubsub.ReceivedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubsub.ReceivedMessage}
 */
proto.pubsub.ReceivedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    case 3:
      var value = new proto.pubsub.Payload;
      reader.readMessage(value,proto.pubsub.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 4:
      var value = new proto.pubsub.Timestamp;
      reader.readMessage(value,proto.pubsub.Timestamp.deserializeBinaryFromReader);
      msg.setPublishTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pubsub.ReceivedMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.ReceivedMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubsub.ReceivedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.ReceivedMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pubsub.Payload.serializeBinaryToWriter
    );
  }
  f = this.getPublishTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pubsub.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pubsub.ReceivedMessage} The clone.
 */
proto.pubsub.ReceivedMessage.prototype.cloneMessage = function() {
  return /** @type {!proto.pubsub.ReceivedMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.pubsub.ReceivedMessage.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.pubsub.ReceivedMessage.prototype.setTopic = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message_id = 2;
 * @return {string}
 */
proto.pubsub.ReceivedMessage.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pubsub.ReceivedMessage.prototype.setMessageId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Payload payload = 3;
 * @return {proto.pubsub.Payload}
 */
proto.pubsub.ReceivedMessage.prototype.getPayload = function() {
  return /** @type{proto.pubsub.Payload} */ (
    jspb.Message.getWrapperField(this, proto.pubsub.Payload, 3));
};


/** @param {proto.pubsub.Payload|undefined} value  */
proto.pubsub.ReceivedMessage.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.pubsub.ReceivedMessage.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * optional Timestamp publish_time = 4;
 * @return {proto.pubsub.Timestamp}
 */
proto.pubsub.ReceivedMessage.prototype.getPublishTime = function() {
  return /** @type{proto.pubsub.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.pubsub.Timestamp, 4));
};


/** @param {proto.pubsub.Timestamp|undefined} value  */
proto.pubsub.ReceivedMessage.prototype.setPublishTime = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.pubsub.ReceivedMessage.prototype.clearPublishTime = function() {
  this.setPublishTime(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubsub.StoredMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pubsub.StoredMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pubsub.StoredMessage.displayName = 'proto.pubsub.StoredMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pubsub.StoredMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.pubsub.StoredMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pubsub.StoredMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pubsub.StoredMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageId: msg.getMessageId(),
    payload: (f = msg.getPayload()) && proto.pubsub.Payload.toObject(includeInstance, f),
    publishTime: (f = msg.getPublishTime()) && proto.pubsub.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubsub.StoredMessage}
 */
proto.pubsub.StoredMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubsub.StoredMessage;
  return proto.pubsub.StoredMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubsub.StoredMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubsub.StoredMessage}
 */
proto.pubsub.StoredMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageId(value);
      break;
    case 2:
      var value = new proto.pubsub.Payload;
      reader.readMessage(value,proto.pubsub.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 3:
      var value = new proto.pubsub.Timestamp;
      reader.readMessage(value,proto.pubsub.Timestamp.deserializeBinaryFromReader);
      msg.setPublishTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pubsub.StoredMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.StoredMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubsub.StoredMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.StoredMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMessageId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pubsub.Payload.serializeBinaryToWriter
    );
  }
  f = this.getPublishTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pubsub.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pubsub.StoredMessage} The clone.
 */
proto.pubsub.StoredMessage.prototype.cloneMessage = function() {
  return /** @type {!proto.pubsub.StoredMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string message_id = 1;
 * @return {string}
 */
proto.pubsub.StoredMessage.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.pubsub.StoredMessage.prototype.setMessageId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Payload payload = 2;
 * @return {proto.pubsub.Payload}
 */
proto.pubsub.StoredMessage.prototype.getPayload = function() {
  return /** @type{proto.pubsub.Payload} */ (
    jspb.Message.getWrapperField(this, proto.pubsub.Payload, 2));
};


/** @param {proto.pubsub.Payload|undefined} value  */
proto.pubsub.StoredMessage.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.pubsub.StoredMessage.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * optional Timestamp publish_time = 3;
 * @return {proto.pubsub.Timestamp}
 */
proto.pubsub.StoredMessage.prototype.getPublishTime = function() {
  return /** @type{proto.pubsub.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.pubsub.Timestamp, 3));
};


/** @param {proto.pubsub.Timestamp|undefined} value  */
proto.pubsub.StoredMessage.prototype.setPublishTime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.pubsub.StoredMessage.prototype.clearPublishTime = function() {
  this.setPublishTime(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubsub.PublishMessages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pubsub.PublishMessages.repeatedFields_, null);
};
goog.inherits(proto.pubsub.PublishMessages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pubsub.PublishMessages.displayName = 'proto.pubsub.PublishMessages';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pubsub.PublishMessages.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pubsub.PublishMessages.prototype.toObject = function(opt_includeInstance) {
  return proto.pubsub.PublishMessages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pubsub.PublishMessages} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pubsub.PublishMessages.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: msg.getTopic(),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.pubsub.Payload.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubsub.PublishMessages}
 */
proto.pubsub.PublishMessages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubsub.PublishMessages;
  return proto.pubsub.PublishMessages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubsub.PublishMessages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubsub.PublishMessages}
 */
proto.pubsub.PublishMessages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 2:
      var value = new proto.pubsub.Payload;
      reader.readMessage(value,proto.pubsub.Payload.deserializeBinaryFromReader);
      msg.getMessagesList().push(value);
      msg.setMessagesList(msg.getMessagesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pubsub.PublishMessages} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.PublishMessages.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubsub.PublishMessages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.PublishMessages.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTopic();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.pubsub.Payload.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pubsub.PublishMessages} The clone.
 */
proto.pubsub.PublishMessages.prototype.cloneMessage = function() {
  return /** @type {!proto.pubsub.PublishMessages} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string topic = 1;
 * @return {string}
 */
proto.pubsub.PublishMessages.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.pubsub.PublishMessages.prototype.setTopic = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Payload messages = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.pubsub.Payload>}
 */
proto.pubsub.PublishMessages.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.pubsub.Payload>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pubsub.Payload, 2));
};


/** @param {Array.<!proto.pubsub.Payload>|undefined} value  */
proto.pubsub.PublishMessages.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.pubsub.PublishMessages.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pubsub.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pubsub.Subscription.repeatedFields_, null);
};
goog.inherits(proto.pubsub.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pubsub.Subscription.displayName = 'proto.pubsub.Subscription';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pubsub.Subscription.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pubsub.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.pubsub.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pubsub.Subscription} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pubsub.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicsList: jspb.Message.getField(msg, 1),
    maxmessages: msg.getMaxmessages()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pubsub.Subscription}
 */
proto.pubsub.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pubsub.Subscription;
  return proto.pubsub.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pubsub.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pubsub.Subscription}
 */
proto.pubsub.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getTopicsList().push(value);
      msg.setTopicsList(msg.getTopicsList());
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxmessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pubsub.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.Subscription.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pubsub.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pubsub.Subscription.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTopicsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getMaxmessages();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pubsub.Subscription} The clone.
 */
proto.pubsub.Subscription.prototype.cloneMessage = function() {
  return /** @type {!proto.pubsub.Subscription} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string topics = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.pubsub.Subscription.prototype.getTopicsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
proto.pubsub.Subscription.prototype.setTopicsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * optional int32 maxMessages = 2;
 * @return {number}
 */
proto.pubsub.Subscription.prototype.getMaxmessages = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.pubsub.Subscription.prototype.setMaxmessages = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.pubsub);
